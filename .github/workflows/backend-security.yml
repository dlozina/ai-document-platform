name: Backend Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Run Safety dependency check
      run: |
        cd backend
        for service in gateway ingestion embedding-service ner-service ocr-service query-service; do
          if [ -f "$service/requirements.txt" ]; then
            echo "Checking $service dependencies..."
            safety check -r "$service/requirements.txt" || true
          fi
        done

    - name: Run Semgrep security scan
      run: |
        cd backend
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          backend/bandit-report.json
          backend/semgrep-report.json

    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîí Security Scan Results\n\n';

          // Add Bandit results if available
          try {
            const banditReport = JSON.parse(fs.readFileSync('backend/bandit-report.json', 'utf8'));
            if (banditReport.results && banditReport.results.length > 0) {
              comment += '### ‚ö†Ô∏è Bandit Security Issues Found\n';
              banditReport.results.forEach(issue => {
                comment += `- **${issue.test_id}**: ${issue.issue_text} (${issue.severity})\n`;
              });
              comment += '\n';
            } else {
              comment += '### ‚úÖ No Bandit security issues found\n\n';
            }
          } catch (e) {
            comment += '### ‚ÑπÔ∏è Bandit scan completed\n\n';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

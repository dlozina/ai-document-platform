[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "query-service"
version = "1.0.0"
description = "Production-ready query service for semantic search and question-answering"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Query Service Team"}
]
keywords = ["semantic-search", "question-answering", "rag", "vector-search", "fastapi", "llm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.6",
    "python-multipart>=0.0.12",
    "sentence-transformers>=2.2.2",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "numpy>=1.24.0",
    "qdrant-client>=1.7.0",
    "pydantic>=2.9.2",
    "pydantic-settings>=2.6.0",
    "httpx>=0.27.2",
    "python-dotenv>=1.0.1",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "scikit-learn>=1.3.0",
    "spacy>=3.7.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "tiktoken>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
]
cache = [
    "redis>=5.2.0",
]
monitoring = [
    "prometheus-client>=0.21.1",
]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "mistralai>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/your-org/query-service"
Documentation = "https://github.com/your-org/query-service#readme"
Repository = "https://github.com/your-org/query-service.git"
Issues = "https://github.com/your-org/query-service/issues"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

services:
  # OCR Service
  ocr-service:
    build: ./ocr-service
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - OCR_DPI=300
      - MAX_FILE_SIZE_MB=10
    volumes:
      - ./ocr-service/src:/app/src:ro
      - ./ocr-service/tests:/app/tests:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  # NER Service
  ner-service:
    build: ./ner-service
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - SPACY_MODEL=en_core_web_sm
      - MAX_TEXT_LENGTH=1000000
    volumes:
      - ./ner-service/src:/app/src:ro
      - ./ner-service/tests:/app/tests:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  # Embedding Service
  embedding-service:
    build: ./embedding-service
    ports:
      - "8002:8002"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - LOG_LEVEL=INFO
    depends_on:
      - qdrant
    volumes:
      - ./embedding-service/src:/app/src
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # Query Service
  query-service:
    build: ./query-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ingestion_db
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=embeddings
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - LLM_PROVIDER=mistral
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - MISTRAL_MODEL=mistral-large-2411
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - qdrant
    volumes:
      - ./query-service/src:/app/src:ro
      - ./query-service/tests:/app/tests:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  # API Gateway Service
  api-gateway-service:
    build: ./gateway
    ports:
      - "8005:8005"
    environment:
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ingestion_db
      - REDIS_URL=redis://redis:6379/1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
      - RATE_LIMIT_REQUESTS_PER_HOUR=1000
      - RATE_LIMIT_REQUESTS_PER_DAY=10000
      - INGESTION_SERVICE_URL=http://ingestion-service:8003
      - OCR_SERVICE_URL=http://ocr-service:8000
      - NER_SERVICE_URL=http://ner-service:8001
      - EMBEDDING_SERVICE_URL=http://embedding-service:8002
      - QUERY_SERVICE_URL=http://query-service:8004
      - ENABLE_CORS=true
      - CORS_ORIGINS=["*"]
      - ALLOWED_HOSTS=["localhost", "127.0.0.1", "0.0.0.0"]
    volumes:
      - ./gateway/src:/app/src:ro
      - ./gateway/tests:/app/tests:ro
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.8.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - backend-network

  # Ingestion Service
  ingestion-service:
    build: ./ingestion
    ports:
      - "8003:8003"
    environment:
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ingestion_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OCR_SERVICE_URL=http://ocr-service:8000
      - NER_SERVICE_URL=http://ner-service:8001
      - EMBEDDING_SERVICE_URL=http://embedding-service:8002
    volumes:
      - ./ingestion/src:/app/src:ro
      - ./ingestion/tests:/app/tests:ro
    depends_on:
      - postgres
      - minio
      - redis
      - ocr-service
      - ner-service
      - embedding-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  # Main Processing Workers (OCR, NER, Embedding)
  celery-worker:
    build: ./ingestion
    command: celery -A src.celery_app worker --loglevel=info --concurrency=3 --queues=ocr_queue,ner_queue,embedding_queue,completion_queue,dead_letter_queue --hostname=worker@%h
    environment:
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ingestion_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OCR_SERVICE_URL=http://ocr-service:8000
      - NER_SERVICE_URL=http://ner-service:8001
      - EMBEDDING_SERVICE_URL=http://embedding-service:8002
    volumes:
      - ./ingestion/src:/app/src:ro
    depends_on:
      - postgres
      - minio
      - redis
      - ocr-service
      - ner-service
      - embedding-service
    restart: unless-stopped
    deploy:
      replicas: 2  # Run 2 worker instances
    networks:
      - backend-network

  # Celery Beat removed - using direct Celery chain approach

  # Flower (Celery Monitoring)
  flower:
    build: ./ingestion
    command: celery -A src.celery_app flower --port=5555 --basic_auth=admin:admin
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - backend-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ingestion_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - backend-network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - backend-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - backend-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana-dashboards:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - backend-network

volumes:
  postgres_data:
  minio_data:
  redis_data:
  qdrant_storage:
  prometheus_data:
  grafana_data:

networks:
  backend-network:
    driver: bridge
